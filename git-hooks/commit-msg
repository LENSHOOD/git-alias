#!/bin/bash

# initial info
COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

allowed_types=("feat" "fix" "docs" "style" "refactor" "test" "chore" "build" "ci" "perf")

# check the three section: header, detail, footer
MSG=$(cat $COMMIT_MSG_FILE | egrep -v "^#.*")
IFS=$'\n\n' read -rd '' -a input_array <<< "$MSG"

if [ ${#input_array[@]} -gt 3 ]
    then
    printf "[COMMIT MESSAGE CHECKER] \n"
    printf "Too many message sections! (Header, Detail, Footer allowed)"
    printf "\nAbout conventional commit, see: https://www.conventionalcommits.org"
    printf "\n"
    exit 1
fi

# check header format
header=${input_array[0]}
IFS=': ' read -rd '' -a header_array <<< "$header"
if [ ${#header_array[@]} -ne 2 ]
    then 
    printf "[COMMIT MESSAGE CHECKER] \n"
    printf "Wrong header format, which should be: {type}({scope}): {description}"
    printf "\nAbout conventional commit, see: https://www.conventionalcommits.org"
    printf "\n"
    exit 1
fi

# check type
is_type_allowed=1
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && is_type_allowed=0 && return; done
  is_type_allowed=1
}

containsElement "${header_array[0]}" "${allowed_types[@]}"
if [ $is_type_allowed -ne 0 ]
    then
    printf "[COMMIT MESSAGE CHECKER] \n"
    printf "Wrong type detected! "
    printf "Allowed: feat, fix, docs, style, refactor, test, chore, build, ci, perf."
    printf "\nAbout conventional commit, see: https://www.conventionalcommits.org"
    printf "\n"
    exit 1
fi

# check header length
if [ ${#header} -gt 72 ]
    then
    printf "[COMMIT MESSAGE CHECKER] \n"
    printf "Too long header! Header length should be shorter than 72 characters."
    printf "\nAbout conventional commit, see: https://www.conventionalcommits.org"
    printf "\n"
    exit 1
fi

exit 0
